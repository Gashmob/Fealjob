<?php


namespace App\Controller;


use App\database\entity\CV;
use App\database\EntityManager;
use App\database\exceptions\UserNotFoundException;
use App\Entity\OffreChantier;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\NonUniqueResultException;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\Routing\Annotation\Route;

class CandidatController extends AbstractController
{
    /**
     * @var SessionInterface
     */
    private SessionInterface $session;

    /**
     * CandidatController constructor.
     * @param SessionInterface $session
     */
    public function __construct(SessionInterface $session)
    {
        $this->session = $session;
    }

    /**
     * @Route("/annonces", name="showAnnonces")
     * @param EntityManagerInterface $em
     * @return Response
     */
    public function offres(EntityManagerInterface $em): Response
    {
        if ($this->session->get('userType') === 'Entreprise')
            return $this->redirectToRoute('userSpace');

        $offres = EntityManager::getAllOffreEmploi($em);

        return $this->render('candidat/showAnnonces.html.twig', [
            'offres' => $offres
        ]);
    }

    /**
     * @Route("/annonces/{nom}", defaults={"nom"=""})
     * @param $nom
     * @param Request $request
     * @param EntityManagerInterface $em
     * @return JsonResponse
     * @throws NonUniqueResultException
     */
    public function offresFilters($nom, Request $request, EntityManagerInterface $em): JsonResponse
    {
        if ($request->isMethod('GET')) {
            $secteur = $request->get('secteur');
            $contrat = $request->get('contrat');
            $salaire = $request->get('salaire');
            $heures = $request->get('heures');
            $deplacement = $request->get('deplacement');

            $offres = EntityManager::getOffreEmploiWithFilter($em, $secteur, $contrat, $salaire, $heures, $deplacement, $nom);
        } else {
            $offres = EntityManager::getAllOffreEmploi($em, $nom);
        }

        return new JsonResponse($offres);
    }

    /**
     * @Route("/create/chantier", name="create_chantier")
     * @param Request $request
     * @return RedirectResponse|Response
     */
    public function createOffreChantier(Request $request, EntityManagerInterface $em)
    {
        if (!$this->session->get('user')) {
            return $this->redirectToRoute('homepage');
        }

        if ($this->session->get('userType') != 'Candidat') {
            return $this->redirectToRoute('userSpace');
        }

        if ($request->isMethod('POST')) {
            // Get all data
            $nom =  $request->get('nom');
            $nomB = true;
            if ($nom == '') {
                $nomB = false;
                $this->addFlash('nom', 'Merci de renseigner un nom');
            }

            $description = $request->get('description');

            $date = $request->get('date');

            $adresse = $request->get('adresse');

            $secteur = $request->get('secteur');

            if ($nomB) {
                $offre = new OffreChantier();
                $offre->setNom($nom)
                    ->setDescription($description)
                    ->setDate($date)
                    ->setAdresse($adresse);
                EntityManager::createOffreChantier($offre, $em, $this->session->get('user'), $secteur);
            }
        }

        return $this->render('autoEntrepreneur/creerAnnonceChantier.html.twig', [
            'secteurs' => EntityManager::getAllActivitySectorName()
        ]);
    }

    // _.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-.

    /**
     * @return string
     */
    private function uploadImage(): string
    {
        if (count($_FILES) == 0) {
            return '';
        }

        if (isset($_FILES['photo']) && $_FILES['photo']['error'] === UPLOAD_ERR_OK) {
            // Infos sur le fichier téléchargé
            $fileTmpPath = $_FILES['photo']['tmp_name'];
            $fileName = $_FILES['photo']['name'];
            $fileNameCmps = explode(".", $fileName);
            $fileExtension = strtolower(end($fileNameCmps));

            // Changement du nom par quelque chose qui ne se répétera pas
            $newFileName = md5(time() . $fileName) . '.' . $fileExtension;

            // Les extensions autorisées
            $allowedfileExtensions = array('jpg', 'gif', 'png', 'jpeg', 'svg');

            if (!file_exists('./uploads/photos')) {
                mkdir('./uploads/photos');
            }

            if (in_array($fileExtension, $allowedfileExtensions)) {
                $uploadFileDir = './uploads/photos/';
                $dest_path = $uploadFileDir . $newFileName;

                if (move_uploaded_file($fileTmpPath, $dest_path)) {
                    return $newFileName;
                } else {
                    $this->addFlash('fail', 'L\'image n\'a pas pu être téléchargée, les droits d\'écriture ne sont pas accordés');
                }
            } else {
                $this->addFlash('fail', 'L\'image n\'a pas pu être téléchargée, l\'extension doit être : ' . implode(',', $allowedfileExtensions));
            }
        } else {
            $this->addFlash('fail', 'Il y eu a une erreur lors du téléchargement : ' . $_FILES['uploadedFile']['error']);
        }

        return "";
    }
}